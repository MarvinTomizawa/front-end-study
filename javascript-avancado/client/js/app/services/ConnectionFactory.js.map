{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","conection","event","target","result","_createStores","onsuccess","connection","close","bind","onerror","error","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;;yCAIFC,iB;AAET,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH;;;;oDAEqB;;AAElB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBT,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAO,wCAAYI,eAAZ,GAA8B,iBAAQ;AAClC,oCAAIC,YAAYC,MAAMC,MAAN,CAAaC,MAA7B;AACAb,kDAAkBc,aAAlB,CAAgCJ,SAAhC;AACH,6BAHD;;AAKAL,wCAAYU,SAAZ,GAAwB,iBAAQ;AAC5B,oCAAG,CAACC,UAAJ,EAAe;AACXA,iDAAaL,MAAMC,MAAN,CAAaC,MAA1B;AACAI,4CAAQD,WAAWC,KAAX,CAAiBC,IAAjB,CAAsBF,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIhB,KAAJ,CAAU,qDAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQa,UAAR;AACH,6BATD;;AAWAX,wCAAYc,OAAZ,GAAsB,iBAAQ;AAC1Bf,uCAAOO,MAAMC,MAAN,CAAaQ,KAApB;AACH,6BAFD;AAGH,yBAtBM,CAAP;AAuBH;;;kDAEoBV,S,EAAW;AAC5Bb,+BAAOwB,OAAP,CAAe,iBAAS;AACpB,gCAAIX,UAAUY,gBAAV,CAA2BC,QAA3B,CAAoCC,KAApC,CAAJ,EAAgD;AAC5Cd,0CAAUe,iBAAV,CAA4BD,KAA5B;AACH;;AAEDd,sCAAUgB,iBAAV,CAA4BF,KAA5B,EAAmC,EAAEG,eAAe,IAAjB,EAAnC;AACH,yBAND;AAOH;;;sDAEuB;AACpB,4BAAGX,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 1;\r\nconst dbName = 'aluraframe';\r\nvar connection;\r\nvar close;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor(){\r\n        throw new Error(\"Não é possível instanciar esta classe\");\r\n    }\r\n\r\n    static getConnection(){\r\n\r\n        return new Promise((resolve, reject) =>{\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n            \r\n            openRequest.onupgradeneeded = event =>{\r\n                let conection = event.target.result;\r\n                ConnectionFactory._createStores(conection);\r\n            }\r\n\r\n            openRequest.onsuccess = event =>{\r\n                if(!connection){\r\n                    connection = event.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function(){\r\n                        throw new Error(\"A conection deve ser fechada pela conection factory\");\r\n                    }\r\n                }\r\n                resolve(connection);\r\n            }\r\n\r\n            openRequest.onerror = event =>{\r\n                reject(event.target.error);\r\n            }\r\n        });\r\n    }\r\n\r\n    static _createStores(conection) {\r\n        stores.forEach(store => {\r\n            if (conection.objectStoreNames.contains(store)) {\r\n                conection.deleteObjectStore(store);\r\n            }\r\n\r\n            conection.createObjectStore(store, { autoIncrement: true });\r\n        });\r\n    }\r\n\r\n    static closeConnection(){\r\n        if(connection){\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n}"]}