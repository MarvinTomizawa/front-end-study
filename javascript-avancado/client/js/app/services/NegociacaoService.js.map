{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","Promise","all","obtemNegociacoesDaSemana","obtemNegociacoesDaSemanaPassada","obtemNegociacoesDaSemanaRetrasada","then","negociacoes","reduce","arrayAchatado","array","concat","_obtemNegociacoes","res","ok","Error","statusText","rota","fetch","_handleErrors","json","map","Date","item","data","quantidade","valor","negociacao","getConnection","connection","dao","adiciona","catch","error","listaTodos","apagaTodos","negociacoesAtuais","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {ConnectionFactory} from './ConnectionFactory.js';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao.js';\r\nimport {Negociacao} from '../models/Negociacao.js';\r\n\r\nexport class NegociacaoService {\r\n\r\n    obterNegociacoes(){\r\n        return Promise.all(\r\n            [this.obtemNegociacoesDaSemana(),\r\n            this.obtemNegociacoesDaSemanaPassada(),\r\n            this.obtemNegociacoesDaSemanaRetrasada()])\r\n            .then(negociacoes => negociacoes.reduce((arrayAchatado, array) => arrayAchatado.concat(array)));\r\n    }\r\n\r\n    obtemNegociacoesDaSemana(){\r\n        return this._obtemNegociacoes('negociacoes/semana');\r\n    }\r\n\r\n    obtemNegociacoesDaSemanaPassada(){\r\n        return this._obtemNegociacoes('negociacoes/anterior');\r\n    }\r\n    \r\n    obtemNegociacoesDaSemanaRetrasada(){\r\n        return this._obtemNegociacoes('negociacoes/retrasada');\r\n    }\r\n\r\n    _handleErrors(res){\r\n        if(res.ok){\r\n            return res;\r\n        }\r\n\r\n        throw new Error(res.statusText);\r\n    }\r\n\r\n    _obtemNegociacoes(rota) {\r\n        return fetch(rota)\r\n            .then(res => this._handleErrors(res))\r\n            .then(res => res.json())\r\n            .then(negociacoes => \r\n                negociacoes.map(item => new Negociacao(new Date(item.data), item.quantidade, item.valor)));\r\n\r\n        // return new Promise((resolve, reject) => {\r\n        //     let xhr = new XMLHttpRequest();\r\n\r\n        // xhr.open('GET', rota);\r\n\r\n        // xhr.onreadystatechange = () => {\r\n\r\n        //     if (xhr.readyState == 4) {\r\n        //         if (xhr.status == 200) {\r\n        //             let negociacoes = JSON.parse(xhr.responseText)\r\n        //                 .map(item => new Negociacao(new Date(item.data), item.quantidade, item.valor));\r\n\r\n        //             resolve(negociacoes);\r\n        //         } else {\r\n        //             console.log(`Ready state ${xhr.readyState} Status: ${xhr.status} Mensagem de erro: ${xhr.responseText}`);\r\n        //             reject(\"Não foi possível buscar as negociações\");\r\n        //         }\r\n        //     }\r\n        // };\r\n\r\n        // xhr.send();\r\n        // })\r\n    }\r\n\r\n    cadastrar(negociacao){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .catch(error => {\r\n                throw new Error(error)\r\n            });\r\n    }\r\n\r\n    listaNegociacoesOffline(){\r\n        return ConnectionFactory\r\n        .getConnection()\r\n        .then(connection => new NegociacaoDao(connection))\r\n        .then(dao => dao.listaTodos())\r\n        .catch(error => {throw new Error(error)})\r\n    }\r\n\r\n    limpaTodos(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .catch(error => {throw new Error(error)})\r\n    }\r\n\r\n    importa(negociacoesAtuais){\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes =>\r\n                negociacoes.filter(negociacao =>\r\n                    !negociacoesAtuais.some(negociacaoExistente =>\r\n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n            ).catch(error => {throw new Error(error)});\r\n    }\r\n}"]}